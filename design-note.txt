Q: what does the application do?
A: provide one single place to view, search and manage live stream channels from two major game streaming sites: Twitch and Mixer (and maybe more).

Q: what are the main features of the application?
A: there are five main features:

    1. user authentication (no sign-up)

        (1). users can login through Okta Hosted Authentication
        (2). users can login through Google/Twitch/Mixer (OAuth 2.0)

    2. display available live streams

        (1). display available games
        (2). display available channels for each game
        (3). users can bookmark/follow channels through channels view

    3. search live streams

        (1). search by game

    4. view history

        (1). list view histories of users
        (2). users can delete histories
        (3). users can bookmark/follow channels through view histories

    5. bookmark/follow channels

        (1). users can remove bookmarked/followed channels

Q: which portion will be written in Angular 2+ (hybrid)?
A: user authentication (login page, user widget and token handling) and search box will be written in Angular 2+.

Q: which portion will be written in AngularJs?
A: anything that is not written in Angular 2+.

Q: what runs on the backend?
A: express.js backed with Redis and MongoDB (using mongoose).

Q: which third-party apis are used by the application?
A: (1). Mixer: https://dev.mixer.com/rest/index.html
   (2). Twitch: https://dev.twitch.tv/docs/api/reference/

Design notes:

1. data flow:

    user hits landing page
        fetch games and view count
        display games

    user clicks login
        redirect to login page
            if login success
                redirect to previous page
            otherwise
                redirect back to login page and display error message

    user searches a game in search box
        suggested games appear as user types

    user clicks a game through main page or result drop-down on search box
        fetch channels and view count
        display channels

    user clicks on view history tab
        display view histories with options to follow channel and remove history

    user clicks on bookmark tab
        display bookmarked/followed channels with status (live/offline)

2. authentication:

    client side must send login credentials on first request

    server receives credentials and authenticate
        if authenticate success
            issue a JWT access token and send it back to client side in response
        otherwise
            include error in response

    client side receives JWT and stores it in local storage/cookie

    client side must include JWT with every request to server

    server receives and verifies JWT
        if verification success
            authorize user
                if authorization success
                    process request
                otherwise
                    return error
        otherwise
            return error

3. models: model_name (model fields) + (fields added on the fly)

bookmark (id, channel_id, title, streamer_name) + (is_live)
channel (id, provider_id, provider_channel_id) + (title, streamer_name, provider_game_id, provider_game_name, image, view_count)
game (id, name, search_api_keys : [{ provider_id, provider_game_id, provider_game_name }]) + (image, view_count, channels : url)
user (id, account_id, name, view_histories : url, bookmarks : url)
view_history (id, user_id, channel_id, title, streamer_name, game_id, game_name, image) + (is_live)
------- (visible to admin only)
account (id, role, username, password, email, oauth_provider, oauth_identifier)
provider (id, name, urls : { site_url, search_game_url, search_channel_url })

4. APIs

api/v1/authenticate
    (1). POST - authenticate user credentials (200 OK/401 Unauthorized)
    (2). otherwise - 405 Method Not Allowed

api/v1/games
    (1). GET - retrieve top 50 games with highest view count (200 OK)
    (2). otherwise - 405 Method Not Allowed

api/v1/games/:id
    (1). GET - retrieve details of specified game (200 OK/404 Not Found)
    (2). otherwise - 405 Method Not Allowed

api/v1/games/:id/channels
    (1). GET - retrieve live channels for specified game (200 OK/404 Not Found)
    (2). otherwise - 405 Method Not Allowed

api/v1/channels
    (1). GET - retrieve top 50 channels with highest view count (200 OK)
    (2). otherwise - 405 Method Not Allowed

api/v1/user - needs authentication (except for POST)
    (1). GET - retrieve user record (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). POST - create user record (201 Created/400 Bad Request)
    (3). PUT - update user record (204 No Content/400 Bad Request/401 Unauthorized/403 Forbidden/404 Not Found/)
    (4). otherwise - 405 Method Not Allowed

api/v1/user/histories - needs authentication
    (1). GET - retrieve user view histories (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). POST - create user view histories (201 Created/204 No Content/400 Bad Request/401 Unauthorized/403 Forbidden)
    (3). DELETE - delete user view histories (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (4). otherwise - 405 Method Not Allowed

api/v1/user/histories/:id - needs authentication
    (1). GET - retrieve user history (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). DELETE - delete user history (204 No Content/401 Unauthorized/403 Forbidden/404 Not Found)
    (3). otherwise - 405 Method Not Allowed

api/v1/user/bookmarks - needs authentication
    (1). GET - retrieve user bookmarks (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). POST - create user bookmarks (201 Created/204 No Content/400 Bad Request/401 Unauthorized/403 Forbidden)
    (3). otherwise - 405 Method Not Allowed

api/v1/user/bookmarks/:id - needs authentication
    (1). GET - retrieve user bookmark (200 OK/401 Unauthorized/403 Forbidden/404 Not Found)
    (2). DELETE - delete user bookmark (204 No Content/401 Unauthorized/403 Forbidden/404 Not Found)
    (3). otherwise - 405 Method Not Allowed
